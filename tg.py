import os
import json
import random
import subprocess
import asyncio
import base64
from pathlib import Path
from datetime import datetime, timedelta

import requests
import time
import re
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ConversationHandler,
    ContextTypes,
    filters,
)

class FusionBrainAPI:
    def __init__(self, url, api_key, secret_key):
        # url –î–û–õ–ñ–ï–ù –∑–∞–∫–∞–Ω—á–∏–≤–∞—Ç—å—Å—è –Ω–∞ '/'
        self.URL = url
        self.AUTH_HEADERS = {
            'X-Key':    f'Key {api_key}',
            'X-Secret': f'Secret {secret_key}',
        }

    def get_pipeline(self):
        # –ø–æ–ª–Ω—ã–π –ø—É—Ç—å: https://api-key.fusionbrain.ai/key/api/v1/pipelines
        resp = requests.get(self.URL + 'key/api/v1/pipelines', headers=self.AUTH_HEADERS)
        resp.raise_for_status()
        return resp.json()[0]['id']

    def generate(self, prompt, pipeline_id, images=1, width=512, height=512):
        params = {
            "type": "GENERATE",
            "numImages": images,
            "width": width,
            "height": height,
            "generateParams": {"query": prompt},
        }
        files = {
            "pipeline_id": (None, pipeline_id),
            "params":      (None, json.dumps(params), "application/json"),
        }
        url = self.URL + "key/api/v1/pipeline/run"
        resp = requests.post(url, headers=self.AUTH_HEADERS, files=files)
        try:
            resp.raise_for_status()
        except requests.exceptions.HTTPError as e:
            # –í–æ—Ç –∑–¥–µ—Å—å –º—ã —Ä–∞—Å–ø–µ—á–∞—Ç–∞–µ–º —Ç–µ–ª–æ –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ FusionBrain
            print("FusionBrain generate() failed:")
            print("  URL:", url)
            print("  Status code:", resp.status_code)
            print("  Response body:", resp.text)
            raise
        return resp.json()["uuid"]

    def check_generation(self, uuid, attempts=20, delay=3):
        for _ in range(attempts):
            resp = requests.get(
                self.URL + f'key/api/v1/pipeline/status/{uuid}',
                headers=self.AUTH_HEADERS
            )
            resp.raise_for_status()
            data = resp.json()
            if data.get('status') == 'DONE':
                return data['result']['files']
            time.sleep(delay)
        return []

# === Bot Config ===
BOT_TOKEN     = "7627856208:AAHF8ZwhuowoJxGUO-1mYeqjhSEWfvMDUDE"
ADMIN_ID      = 7552313011

APPROVED_FILE = Path("approved_users.json")
if not APPROVED_FILE.exists():
    APPROVED_FILE.write_text("[]")
def load_approved() -> set:
    return set(json.loads(APPROVED_FILE.read_text()))
def save_approved(s: set):
    APPROVED_FILE.write_text(json.dumps(list(s)))

# === Paths & Constants ===
SETTINGS_DIR  = Path("bot_settings")
STATS_FILE    = Path("bot_stats.json")
FFMPEG_BIN    = Path("ffmpeg/bin/ffmpeg.exe")
FFPROBE_BIN   = FFMPEG_BIN.parent / "ffprobe.exe"
MAX_FILE_SIZE = 20 * 1024 * 1024  # 20 MB

# Ensure persistence
SETTINGS_DIR.mkdir(exist_ok=True)
if not STATS_FILE.exists():
    STATS_FILE.write_text(json.dumps({}))

# === Conversation States ===
(
    AWAITING_IMG_PROMPT,
    AWAITING_IMG_COUNT,
    UPLOADING_VIDEO,
    UPLOADING_IMAGES,
    CONFIGURING,
    OFFSET_X_INPUT,
    OFFSET_Y_INPUT
) = range(7)

# === Stats Helpers ===
def load_stats() -> dict:
    return json.loads(STATS_FILE.read_text())

def save_stats(stats: dict):
    STATS_FILE.write_text(json.dumps(stats, indent=2))

async def approve_user(chat_id: int):
    stats = load_stats()
    user = stats.get(str(chat_id), {})
    user['approved'] = True
    stats[str(chat_id)] = user
    save_stats(stats)

async def update_user_stat(chat_id: int, key: str, delta: int = 1):
    stats = load_stats()
    user = stats.get(str(chat_id), {})
    user[key] = user.get(key, 0) + delta
    if 'first_use' not in user:
        user['first_use'] = datetime.utcnow().isoformat()
    stats[str(chat_id)] = user
    save_stats(stats)

# === Settings Helpers ===
async def load_chat_settings(chat_id: int) -> dict:
    path = SETTINGS_DIR / f"{chat_id}.json"
    defaults = {
        "video_file": None,
        "images": [],
        "alpha": 0,
        "img_scale": 150,
        "video_scale": 100,
        "offset_x": 0,
        "offset_y": 0,
        "aspect": "9:16",
        "fps": 30,
        "n": 1,
        "animate": False,
        "use_img_gen": False,
    }
    if path.exists():
        data = json.loads(path.read_text())
        for k, v in defaults.items():
            data.setdefault(k, v)
        return data
    return defaults

async def save_chat_settings(chat_id: int, settings: dict):
    (SETTINGS_DIR / f"{chat_id}.json").write_text(
        json.dumps(settings, ensure_ascii=False, indent=2)
    )

# === Main Menu ===
async def send_main_menu(chat_id: int, context: ContextTypes.DEFAULT_TYPE):
    settings = await load_chat_settings(chat_id)
    gen_label = "üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è: ‚úîÔ∏è" if settings['use_img_gen'] else "üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è: ‚ùå"
    kb = [
        [InlineKeyboardButton(gen_label, callback_data="toggle_img_gen")],
        [
            InlineKeyboardButton("üé¨ –í–∏–¥–µ–æ", callback_data="upload_video"),
            InlineKeyboardButton("üñºÔ∏è –ö–∞—Ä—Ç–∏–Ω–∫–∏", callback_data="upload_images")
        ],
        [
            InlineKeyboardButton("üîç –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä", callback_data="preview"),
            InlineKeyboardButton("üöÄ –°—Ç–∞—Ä—Ç", callback_data="start_process")
        ],
        [
            InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings"),
            InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")
        ]
    ]
    if chat_id == ADMIN_ID:
        kb.append([InlineKeyboardButton("üõ†Ô∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data="admin_panel")])
    await context.bot.send_message(chat_id, "‚ú® –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=InlineKeyboardMarkup(kb))

# === Handlers ===

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    uid = update.effective_chat.id

    # –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ approved_users.json
    if uid not in load_approved():
        now = datetime.utcnow()
        stats = load_stats().get(str(uid), {})
        last = stats.get('last_request')
        if last:
            last_dt = datetime.fromisoformat(last)
            if now - last_dt < timedelta(hours=1):
                await update.message.reply_text(
                    "‚è≥ –í—ã —É–∂–µ –ø–æ–¥–∞–≤–∞–ª–∏ –∑–∞—è–≤–∫—É –Ω–µ–¥–∞–≤–Ω–æ, –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ —á–∞—Å."
                )
                return ConversationHandler.END

        # –æ—Ç–º–µ—á–∞–µ–º –≤—Ä–µ–º—è —ç—Ç–æ–π –ø–æ–ø—ã—Ç–∫–∏
        stats['last_request'] = now.isoformat()
        all_stats = load_stats()
        all_stats[str(uid)] = stats
        save_stats(all_stats)

        # —à–ª—ë–º –∞–¥–º–∏–Ω—É –∫–Ω–æ–ø–∫–∏
        kb = InlineKeyboardMarkup([[
            InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"approve_{uid}"),
            InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"decline_{uid}")
        ]])
        await context.bot.send_message(
            ADMIN_ID,
            f"–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –æ—Ç @{update.effective_user.username or uid}",
            reply_markup=kb
        )
        await update.message.reply_text(
            "üü£–ó–∞—è–≤–∫–∞ –±—ã–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É @durovpickme. –û–∂–∏–¥–∞–π—Ç–µ"
        )
        return ConversationHandler.END

    # –µ—Å–ª–∏ —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ approved_users.json
    await update.message.reply_text("‚ú® –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!")
    await update_user_stat(uid, 'sessions', 0)
    await send_main_menu(uid, context)
    return CONFIGURING

async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    uid = update.effective_chat.id
    if uid not in load_approved():
        if update.callback_query:
            await update.callback_query.message.reply_text(
                "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–±—Ä–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –ß—Ç–æ–±—ã –ø–æ–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start"
            )
        else:
            await update.message.reply_text(
                "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–±—Ä–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –ß—Ç–æ–±—ã –ø–æ–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start"
            )
        return ConversationHandler.END

    query = update.callback_query
    await query.answer()
    chat_id  = query.message.chat.id
    settings = await load_chat_settings(chat_id)
    data     = query.data

    # Toggle image-generation mode
    if data == 'toggle_img_gen':
        settings['use_img_gen'] = not settings['use_img_gen']
        await save_chat_settings(chat_id, settings)

        # —Å—Ç—Ä–æ–∏–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
        gen_label = "üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è: ‚úîÔ∏è" if settings['use_img_gen'] else "üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è: ‚ùå"
        kb = [
            [InlineKeyboardButton(gen_label, callback_data="toggle_img_gen")],
            [
                InlineKeyboardButton("üé¨ –í–∏–¥–µ–æ", callback_data="upload_video"),
                InlineKeyboardButton("üñºÔ∏è –ö–∞—Ä—Ç–∏–Ω–∫–∏", callback_data="upload_images")
            ],
            [
                InlineKeyboardButton("üîç –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä", callback_data="preview"),
                InlineKeyboardButton("üöÄ –°—Ç–∞—Ä—Ç", callback_data="start_process")
            ],
            [
                InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings"),
                InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")
            ]
        ]
        if chat_id == ADMIN_ID:
            kb.append([InlineKeyboardButton("üõ†Ô∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data="admin_panel")])

        # –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ç–∫—É –Ω–∞ –º–µ—Å—Ç–µ
        await query.edit_message_reply_markup(InlineKeyboardMarkup(kb))
        return CONFIGURING

    # Prompt for FusionBrain –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è
    if data == 'upload_images' and settings['use_img_gen']:
        await context.bot.send_message(chat_id, 'üìã –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø—Ä–æ–º—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∏:')
        return AWAITING_IMG_PROMPT

    # –û–±—ã—á–Ω—ã–µ –ø—É–Ω–∫—Ç—ã –º–µ–Ω—é
    if data == 'upload_video':
        await context.bot.send_message(chat_id, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ (<20MB) –∏–ª–∏ —Å—Å—ã–ª–∫—É:')
        return UPLOADING_VIDEO
    if data == 'upload_images':
        await context.bot.send_message(chat_id, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –∏–ª–∏ ZIP:')
        return UPLOADING_IMAGES
    if data == 'preview':
        return await preview(update, context)
    if data == 'start_process':
        return await start_processing(update, context)
    if data == 'settings':
        return await settings_menu(query, settings)
    if data == 'stats':
        return await show_stats(update, context)
    if data == 'set_offx':
        await context.bot.send_message(chat_id, '–í–≤–µ–¥–∏—Ç–µ —Å–º–µ—â–µ–Ω–∏–µ X:')
        return OFFSET_X_INPUT
    if data == 'set_offy':
        await context.bot.send_message(chat_id, '–í–≤–µ–¥–∏—Ç–µ —Å–º–µ—â–µ–Ω–∏–µ Y:')
        return OFFSET_Y_INPUT
    if data == 'admin_panel' and chat_id == ADMIN_ID:
        return await admin_panel(update, context)
    if data.startswith('user_') and chat_id == ADMIN_ID:
        uid = int(data.split('_', 1)[1])
        return await user_stats(update, context, uid)
    if data == 'back_main':
        await query.edit_message_text('‚ú® –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:')
        await send_main_menu(chat_id, context)
        return CONFIGURING

    # –ü–æ–¥—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    step = 5
    if data == 'alpha_plus':    settings['alpha'] = min(100, settings['alpha'] + step)
    elif data == 'alpha_minus': settings['alpha'] = max(0, settings['alpha'] - step)
    elif data == 'img_plus':    settings['img_scale'] = min(300, settings['img_scale'] + step)
    elif data == 'img_minus':   settings['img_scale'] = max(10, settings['img_scale'] - step)
    elif data == 'vid_plus':    settings['video_scale'] = min(300, settings['video_scale'] + step)
    elif data == 'vid_minus':   settings['video_scale'] = max(10, settings['video_scale'] - step)
    elif data == 'fps_plus':    settings['fps'] = min(60, settings['fps'] + 5)
    elif data == 'fps_minus':   settings['fps'] = max(1, settings['fps'] - 5)
    elif data == 'n_plus':      settings['n'] = min(10, settings['n'] + 1)
    elif data == 'n_minus':     settings['n'] = max(1, settings['n'] - 1)
    elif data in ('aspect_prev','aspect_next'):
        opts = ['9:16','16:9','4:3']; idx = opts.index(settings['aspect'])
        settings['aspect'] = opts[(idx + (1 if data=='aspect_next' else -1)) % len(opts)]
    elif data == 'animate_toggle':
        settings['animate'] = not settings['animate']

    await save_chat_settings(chat_id, settings)
    return await settings_menu(query, settings)

async def approval_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    action, uid_str = query.data.split("_",1)
    uid = int(uid_str)
    if query.from_user.id != ADMIN_ID:
        return CONFIGURING

    approved = load_approved()
    if action == "approve":
        approved.add(uid)
        msg = "‚úÖ –î–æ—Å—Ç—É–ø –≤—ã–¥–∞–Ω."
        notify = "üéâ –í–∞–º –æ—Ç–∫—Ä—ã—Ç –¥–æ—Å—Ç—É–ø –∫ —É–Ω–∏–∫–∞–ª–∏–∑–∞—Ç–æ—Ä—É! –ù–∞–ø–∏—à–∏—Ç–µ /start"
    else:  # revoke
        approved.discard(uid)
        msg = "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–±—Ä–∞–Ω."
        notify = "‚ö†Ô∏è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ—Ç–∫–ª–æ–Ω–∏–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å. –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.\n–ï—Å–ª–∏ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å, –Ω–∞–ø–∏—à–∏—Ç–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É:\n@durovpickme"
    save_approved(approved)

    # —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        await context.bot.send_message(uid, notify)
    except:
        pass

    # –æ–±–Ω–æ–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É
    new_mark = '‚úÖ' if action=='revoke' else '‚ùå'
    new_action = 'revoke' if action!='revoke' else 'approve'
    kb = [[InlineKeyboardButton(f"{new_mark} {uid}", callback_data=f"{new_action}_{uid}")]]
    await query.edit_message_text(msg, reply_markup=InlineKeyboardMarkup(kb))
    return CONFIGURING

async def settings_menu(query, settings: dict) -> int:
    kb = [
        [
            InlineKeyboardButton(f"–ü—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å: {settings['alpha']}%", callback_data='alpha_minus'),
            InlineKeyboardButton('‚ûï', callback_data='alpha_plus')
        ],
        [
            InlineKeyboardButton(f"–ò–∑–æ–±—Ä. –º–∞—Å—à—Ç–∞–±: {settings['img_scale']}%", callback_data='img_minus'),
            InlineKeyboardButton('‚ûï', callback_data='img_plus')
        ],
        [
            InlineKeyboardButton(f"–í–∏–¥–µ–æ –º–∞—Å—à—Ç–∞–±: {settings['video_scale']}%", callback_data='vid_minus'),
            InlineKeyboardButton('‚ûï', callback_data='vid_plus')
        ],
        [
            InlineKeyboardButton(f"FPS: {settings['fps']}", callback_data='fps_minus'),
            InlineKeyboardButton('‚ûï', callback_data='fps_plus')
        ],
        [
            InlineKeyboardButton(f"–í–∞—Ä–∏–∞–Ω—Ç–æ–≤: {settings['n']}", callback_data='n_minus'),
            InlineKeyboardButton('‚ûï', callback_data='n_plus')
        ],
        [
            InlineKeyboardButton(f"Aspect: {settings['aspect']} ‚Üê", callback_data='aspect_prev'),
            InlineKeyboardButton('‚Üí', callback_data='aspect_next')
        ],
        [
            InlineKeyboardButton(f"–ê–Ω–∏–º–∞—Ü–∏—è: {'‚úî' if settings['animate'] else '‚úñ'}", callback_data='animate_toggle')
        ],
        [
            InlineKeyboardButton(f"–°–¥–≤–∏–≥ X: {settings['offset_x']}", callback_data='set_offx'),
            InlineKeyboardButton(f"–°–¥–≤–∏–≥ Y: {settings['offset_y']}", callback_data='set_offy')
        ],
        [
            InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data='back_main')
        ],
    ]
    await query.edit_message_text('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:', reply_markup=InlineKeyboardMarkup(kb))
    return CONFIGURING

async def upload_video_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    uid = update.effective_chat.id
    if uid not in load_approved():
        await update.message.reply_text(
            "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–±—Ä–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –ß—Ç–æ–±—ã –ø–æ–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start"
        )
        return ConversationHandler.END

    # –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ–º chat_id
    chat_id = uid

    text  = update.message.text or ''
    media = update.message.video or update.message.document

    if text.startswith('http'):
        resp = requests.get(text, stream=True); resp.raise_for_status()
        suf  = Path(text).suffix or '.mp4'
        p    = SETTINGS_DIR / f"{chat_id}_video{suf}"
        with open(p, 'wb') as f:
            for chunk in resp.iter_content(1024*1024):
                f.write(chunk)
        s = await load_chat_settings(chat_id)
        s['video_file'] = str(p)
        await save_chat_settings(chat_id, s)
        await context.bot.send_message(chat_id, '‚úÖ URL –≤–∏–¥–µ–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.')
        await send_main_menu(chat_id, context)
        return CONFIGURING

    if not media or (media.file_size or 0) > MAX_FILE_SIZE:
        await context.bot.send_message(chat_id, '‚ùå –í–∏–¥–µ–æ >20MB.')
        return UPLOADING_VIDEO

    fo  = await media.get_file()
    suf = Path(fo.file_path).suffix
    p   = SETTINGS_DIR / f"{chat_id}_video{suf}"
    await fo.download_to_drive(str(p))
    s = await load_chat_settings(chat_id)
    s['video_file'] = str(p)
    await save_chat_settings(chat_id, s)
    await context.bot.send_message(chat_id, '‚úÖ –í–∏–¥–µ–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.')
    await send_main_menu(chat_id, context)
    return CONFIGURING

async def upload_images_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    chat_id  = update.effective_chat.id
    doc      = update.message.document
    imgs_dir = SETTINGS_DIR / f"{chat_id}_imgs"; imgs_dir.mkdir(exist_ok=True)
    if not doc:
        await context.bot.send_message(chat_id, '‚ùå –û—à–∏–±–∫–∞: –Ω–µ—Ç —Ñ–∞–π–ª–∞')
        return UPLOADING_IMAGES
    fo = await doc.get_file(); fp = imgs_dir / doc.file_name
    await fo.download_to_drive(str(fp))
    if fp.suffix.lower() == '.zip':
        subprocess.run(['unzip','-o',str(fp),'-d',str(imgs_dir)]); fp.unlink()
    imgs = [str(p) for p in imgs_dir.iterdir() if p.suffix.lower() in ('.jpg','.jpeg','.png')]
    s    = await load_chat_settings(chat_id); s['images'] = imgs
    await save_chat_settings(chat_id, s)
    await context.bot.send_message(chat_id, f'‚úÖ {len(imgs)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∑–∞–≥—Ä—É–∂–µ–Ω–æ.')
    await send_main_menu(chat_id, context)
    return CONFIGURING

async def offset_x_input(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    chat_id = update.effective_chat.id
    try:
        x = int(update.message.text)
    except:
        await context.bot.send_message(chat_id, '‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ')
        return OFFSET_X_INPUT
    s             = await load_chat_settings(chat_id)
    s['offset_x'] = x
    await save_chat_settings(chat_id, s)
    await context.bot.send_message(chat_id, f'–°–¥–≤–∏–≥ X: {x}')
    await send_main_menu(chat_id, context)
    return CONFIGURING

async def offset_y_input(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    chat_id = update.effective_chat.id
    try:
        y = int(update.message.text)
    except:
        await context.bot.send_message(chat_id, '‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ')
        return OFFSET_Y_INPUT
    s             = await load_chat_settings(chat_id)
    s['offset_y'] = y
    await save_chat_settings(chat_id, s)
    await context.bot.send_message(chat_id, f'–°–¥–≤–∏–≥ Y: {y}')
    await send_main_menu(chat_id, context)
    return CONFIGURING

async def preview(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query   = update.callback_query; await query.answer()
    chat_id = query.message.chat.id
    s       = await load_chat_settings(chat_id)
    if not s['video_file'] or not s['images']:
        await context.bot.send_message(chat_id, '‚ùå –ó–∞–≥—Ä—É–∑–∏—Ç–µ –≤–∏–¥–µ–æ –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.')
        await send_main_menu(chat_id, context)
        return CONFIGURING

    w, h = (1080,1920) if s['aspect']=='9:16' else ((1920,1080) if s['aspect']=='16:9' else (1024,768))
    alpha = 1 - s['alpha']/100
    img_w, img_h = int(w*s['img_scale']/100), int(h*s['img_scale']/100)
    vid_w = int(w*s['video_scale']/100)
    off_x, off_y = s['offset_x'], s['offset_y']
    dur = 0
    if s['animate']:
        try:
            out = subprocess.check_output([
                str(FFPROBE_BIN), '-v','error','-show_entries','format=duration',
                '-of','default=noprint_wrappers=1:nokey=1', s['video_file']
            ])
            dur = float(out)
        except:
            dur = 0
    move = (f"x='(main_w-overlay_w)*t/{dur}':y='(main_h-overlay_h)*t/{dur}'" if s['animate'] and dur>0
            else "x='(main_w-overlay_w)/2':y='(main_h-overlay_h)/2'")
    preview_file = SETTINGS_DIR / f"{chat_id}_preview.png"
    cmd = [
        str(FFMPEG_BIN), '-y','-f','lavfi','-i',f"color=black:s={w}x{h}",
        '-i',s['images'][0],'-i',s['video_file'],
        '-filter_complex',
        (f"[1:v]scale={img_w}:{img_h},format=rgba[img];"
         f"[2:v]scale={vid_w}:-1,format=rgba,colorchannelmixer=aa={alpha}[vid];"
         f"[0:v][img]overlay={move}[tmp];"
         f"[tmp][vid]overlay=x='(main_w-overlay_w)/2+{off_x}':"
         f"y='(main_h-overlay_h)/2+{off_y}':shortest=1"),
        '-frames:v','1',str(preview_file)
    ]
    subprocess.run(cmd, check=True)
    await context.bot.send_photo(chat_id, open(preview_file,'rb'))
    await send_main_menu(chat_id, context)
    return CONFIGURING

async def generate_image_with_count(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    chat_id = update.effective_chat.id
    text = update.message.text.strip()

    # 1) –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–∏—Å–ª–æ
    try:
        n = int(text)
        if not (1 <= n <= 10):
            raise ValueError()
    except ValueError:
        await context.bot.send_message(chat_id, "‚ùå –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10.")
        return AWAITING_IMG_COUNT

    prompt = context.user_data.get('img_prompt')
    if not prompt:
        await context.bot.send_message(chat_id, "‚ùå –ü—Ä–æ–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ (/start).")
        return CONFIGURING

    await context.bot.send_message(chat_id, f"‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é {n} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π‚Ä¶")

    api = FusionBrainAPI(
        url="https://api-key.fusionbrain.ai/",
        api_key="F2566ABF386C604F384B976F56D76D40",
        secret_key="056DA47E786A5A5550062476E5EAF582"
    )

    imgs_dir = SETTINGS_DIR / f"{chat_id}_gen_imgs"
    imgs_dir.mkdir(exist_ok=True)
    paths = []

    try:
        pipeline_id = api.get_pipeline()

        for i in range(1, n + 1):
            # 2) –û—Ç–¥–µ–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            job_uuid = api.generate(prompt, pipeline_id, images=1, width=512, height=512)
            files    = await asyncio.to_thread(api.check_generation, job_uuid)
            if not files:
                await context.bot.send_message(chat_id, f"‚ùå –¢–∞–π–º–∞—É—Ç –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ {i}.")
                continue

            # FusionBrain –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–æ–≤–Ω–æ –æ–¥–∏–Ω —Ñ–∞–π–ª
            item = files[0]

            # —Å–∫–∞—á–∏–≤–∞–µ–º URL –∏–ª–∏ –¥–µ–∫–æ–¥–∏—Ä—É–µ–º Base64
            if item.startswith("http"):
                resp = await asyncio.to_thread(requests.get, item)
                resp.raise_for_status()
                img_bytes = resp.content
            else:
                b64 = item.split("base64,")[-1]
                img_bytes = base64.b64decode(b64)

            # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
            p = imgs_dir / f"gen_{i}.png"
            p.write_bytes(img_bytes)
            paths.append(str(p))
            await context.bot.send_photo(chat_id, img_bytes)

    except Exception as e:
        msg = str(e)
        if len(msg) > 300:
            msg = msg[:300] + "‚Ä¶"
        await context.bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {msg}")
        return CONFIGURING

    # 3) –û–±–Ω–æ–≤–ª—è–µ–º settings –∏ —á–∏—Å—Ç–∏–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    settings = await load_chat_settings(chat_id)
    settings['images'] = paths
    await save_chat_settings(chat_id, settings)
    context.user_data.pop('img_prompt', None)

    # 4) –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é
    await send_main_menu(chat_id, context)
    return CONFIGURING

async def generate_image_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    uid = update.effective_chat.id
    if uid not in load_approved():
        await update.message.reply_text(
            "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–±—Ä–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –ß—Ç–æ–±—ã –ø–æ–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start"
        )
        return ConversationHandler.END

    prompt = update.message.text.strip()
    context.user_data['img_prompt'] = prompt
    await context.bot.send_message(
        uid,
        f"–ü—Ä–æ–º—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω:\n¬´{prompt}¬ª\n\n–°–∫–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å? (–≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ)"
    )
    return AWAITING_IMG_COUNT

async def start_processing(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    uid = update.effective_chat.id
    if uid not in load_approved():
        await update.message.reply_text(
            "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–±—Ä–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –ß—Ç–æ–±—ã –ø–æ–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start"
        )
        return ConversationHandler.END
        
    query = update.callback_query
    await query.answer()
    chat_id = query.message.chat.id

    # —Å—Ä–∞–∑—É —É–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å –Ω–∞—á–∞–ª—Å—è
    await context.bot.send_message(chat_id, "üöÄ –ù–∞—á–∏–Ω–∞—é —É–Ω–∏–∫–∞–ª–∏–∑–∞—Ü–∏—é –≤–∏–¥–µ–æ –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π‚Ä¶")
    await context.bot.send_sticker(chat_id, "CAACAgIAAxkBAAEP2HFoTL2pTv0kLymmpnljn_CIoMQ25AACCU8AAjJq0EklRJJ0CnXAtTYE")  # <-- –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π file_id

    # –≥—Ä—É–∑–∏–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    s = await load_chat_settings(chat_id)
    if not s['video_file'] or not s['images']:
        await context.bot.send_message(chat_id, '‚ùå –ó–∞–≥—Ä—É–∑–∏—Ç–µ –≤–∏–¥–µ–æ –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.')
        await send_main_menu(chat_id, context)
        return CONFIGURING

    # –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    w, h = (1080,1920) if s['aspect']=='9:16' else ((1920,1080) if s['aspect']=='16:9' else (1024,768))
    out_dir = SETTINGS_DIR / f"{chat_id}_results"
    out_dir.mkdir(exist_ok=True)

    # —Å—á–∏—Ç–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é
    await update_user_stat(chat_id, 'sessions', 1)

    # —Å–∞–º —Ü–∏–∫–ª —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
    for i in range(1, s['n'] + 1):
        img_path = random.choice(s['images'])
        out_file = out_dir / f"uniq_{i}_{Path(s['video_file']).name}"
        alpha    = 1 - s['alpha'] / 100
        off_x, off_y = s['offset_x'], s['offset_y']
        img_w, img_h = int(w * s['img_scale'] / 100), int(h * s['img_scale'] / 100)
        vid_w = int(w * s['video_scale'] / 100)
        dur = 0
        if s['animate']:
            try:
                out = subprocess.check_output([
                    str(FFPROBE_BIN), '-v', 'error', '-show_entries', 'format=duration',
                    '-of', 'default=noprint_wrappers=1:nokey=1', s['video_file']
                ])
                dur = float(out)
            except:
                dur = 0
        move = (
            f"x='(main_w-overlay_w)*t/{dur}':y='(main_h-overlay_h)*t/{dur}'"
            if s['animate'] and dur > 0
            else "x='(main_w-overlay_w)/2':y='(main_h-overlay_h)/2'"
        )

        cmd = [
            str(FFMPEG_BIN), '-y', '-f', 'lavfi', '-i', f"color=black:s={w}x{h}",
            '-i', img_path, '-i', s['video_file'], '-filter_complex',
            (
                f"[1:v]scale={img_w}:{img_h},format=rgba[img];"
                f"[2:v]scale={vid_w}:-1,format=rgba,colorchannelmixer=aa={alpha}[vid];"
                f"[0:v][img]overlay={move}[tmp];"
                f"[tmp][vid]overlay=x='(main_w-overlay_w)/2+{off_x}':"
                f"y='(main_h-overlay_h)/2+{off_y}':shortest=1"
            ),
            '-c:v', 'libx264', '-preset', 'ultrafast', '-crf', '20',
            '-r', str(s['fps']), '-c:a', 'copy', str(out_file)
        ]
        subprocess.run(cmd, check=True)

        # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–æ—Ç–æ–≤—ã–π —Ñ–∞–π–ª
        await context.bot.send_document(chat_id, open(out_file, 'rb'))
        await update_user_stat(chat_id, 'processed', 1)

    # –ø–æ –æ–∫–æ–Ω—á–∞–Ω–∏–∏
    await context.bot.send_message(chat_id, '‚úÖ –£–Ω–∏–∫–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.')
    await send_main_menu(chat_id, context)
    return CONFIGURING

async def show_stats(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    uid   = update.effective_chat.id
    st    = load_stats().get(str(uid),{})
    first = st.get('first_use','-'); ses = st.get('sessions',0); proc = st.get('processed',0)
    text  = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n- –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {first}\n- –°–µ—Å—Å–∏–π: {ses}\n- –í–∏–¥–µ–æ: {proc}"
    await context.bot.send_message(uid,text)
    await send_main_menu(uid,context)
    return CONFIGURING

async def admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    stats = load_stats()
    approved = load_approved()
    kb = []
    for uid_str in stats:
        uid = int(uid_str)
        try:
            ch = await context.bot.get_chat(uid)
            name = " ".join(filter(None, (ch.first_name, ch.last_name)))
        except:
            name = str(uid)
        mark = '‚úÖ' if uid in approved else '‚ùå'
        kb.append([InlineKeyboardButton(f"{mark} {name}", callback_data=f"user_{uid}")])
    kb.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_main")])
    await query.edit_message_text("üõ†Ô∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å:", reply_markup=InlineKeyboardMarkup(kb))
    return CONFIGURING

async def user_stats(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    uid = update.effective_chat.id
    if uid not in load_approved():
        await update.message.reply_text(
            "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–±—Ä–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –ß—Ç–æ–±—ã –ø–æ–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start"
        )
        return ConversationHandler.END
        
    query = update.callback_query
    await query.answer()
    uid = int(query.data.split("_",1)[1])

    st = load_stats().get(str(uid),{})
    first = st.get('first_use','-')
    ses   = st.get('sessions',0)
    proc  = st.get('processed',0)
    try:
        ch = await context.bot.get_chat(uid)
        name = " ".join(filter(None,(ch.first_name, ch.last_name)))
    except:
        name = str(uid)

    approved = uid in load_approved()
    action = 'revoke' if approved else 'approve'
    btn_text = "‚ùå –ó–∞–±—Ä–∞—Ç—å –¥–æ—Å—Ç—É–ø" if approved else "‚úÖ –í—ã–¥–∞—Ç—å –¥–æ—Å—Ç—É–ø"
    kb = [
        [InlineKeyboardButton(btn_text, callback_data=f"{action}_{uid}")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_panel")],
    ]

    text = (
        f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ {name} (id={uid}):\n"
        f"- –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {first}\n"
        f"- –°–µ—Å—Å–∏–π: {ses}\n"
        f"- –í–∏–¥–µ–æ: {proc}"
    )
    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(kb))
    return CONFIGURING

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    cid = update.effective_chat.id
    await context.bot.send_message(cid,'‚ùå –û—Ç–º–µ–Ω–∞.')
    await send_main_menu(cid,context)
    return ConversationHandler.END

async def approve_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –æ–∂–∏–¥–∞–µ–º –∫–æ–º–∞–Ω–¥—É –≤–∏–¥–∞ /approve_123456789
    m = re.match(r'^approve_(\d+)$', update.message.text or '')
    if not m or update.effective_user.id != ADMIN_ID:
        return
    uid = int(m.group(1))
    await approve_user(uid)
    await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {uid} –æ–¥–æ–±—Ä–µ–Ω.")
    # —É–≤–µ–¥–æ–º–ª—è–µ–º —é–∑–µ—Ä–∞
    try:
        await context.bot.send_message(uid, "üéâ –í–∞–º –æ—Ç–∫—Ä—ã—Ç –¥–æ—Å—Ç—É–ø! –ù–∞–ø–∏—à–∏—Ç–µ /start")
    except:
        pass

if __name__ == "__main__":
    from telegram.ext import (
        ApplicationBuilder,
        ConversationHandler,
        CommandHandler,
        MessageHandler,
        CallbackQueryHandler,
        filters,
    )

    app = ApplicationBuilder().token(BOT_TOKEN).build()

    # ‚Äî‚Äî‚Äî 1) –ì–ª–æ–±–∞–ª—å–Ω—ã–π –ª–æ–≤–µ—Ü approve/decline/revoke (–¥–æ ConversationHandler)
    app.add_handler(
        CallbackQueryHandler(
            approval_callback,
            pattern=r'^(approve|decline|revoke)_\d+$'
        )
    )

    # ‚Äî‚Äî‚Äî 2) ConversationHandler –¥–ª—è –≤—Å–µ–≥–æ –æ—Å—Ç–∞–ª—å–Ω–æ–≥–æ
    conv = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            AWAITING_IMG_PROMPT: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, generate_image_handler)
            ],
            AWAITING_IMG_COUNT: [
                MessageHandler(filters.Regex(r'^[1-9]\d*$'), generate_image_with_count)
            ],
            UPLOADING_VIDEO: [
                MessageHandler(filters.ALL, upload_video_handler)
            ],
            UPLOADING_IMAGES: [
                MessageHandler(filters.ALL, upload_images_handler)
            ],
            OFFSET_X_INPUT: [
                MessageHandler(filters.Regex(r'^-?\d+$'), offset_x_input)
            ],
            OFFSET_Y_INPUT: [
                MessageHandler(filters.Regex(r'^-?\d+$'), offset_y_input)
            ],
            CONFIGURING: [
                # –ø—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∞–¥–º–∏–Ω–∫–µ
                CallbackQueryHandler(user_stats, pattern=r'^user_\d+$'),
                # –≤—Å—ë –æ—Å—Ç–∞–ª—å–Ω–æ–µ –º–µ–Ω—é (—Ç–æ–ª—å–∫–æ button_callback):
                CallbackQueryHandler(button_callback),
            ],
        },
        fallbacks=[CommandHandler('cancel', cancel)],
        allow_reentry=True,
    )
    app.add_handler(conv)

    app.run_polling()
